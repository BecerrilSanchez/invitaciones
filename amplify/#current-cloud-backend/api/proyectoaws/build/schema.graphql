type Todo {
  id: ID!
  IDnovios: String!
  nombreInvitado1: String
  nombreInvitado2: String
  nombreInvitado3: String
  nombreInvitado4: String
  nombreInvitado5: String
  nombreInvitado6: String
  nombreInvitado7: String
  nombreInvitado8: String
  nombreInvitado9: String
  nombreInvitado10: String
  nombreInvitado11: String
  nombreInvitado12: String
  ofertaDeInvitaciones: Int
  nInvitacionesAceptadas: Int
  invitacionFamiliar: Boolean!
  apellidosFamilia: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  IDnovios: ModelStringInput
  nombreInvitado1: ModelStringInput
  nombreInvitado2: ModelStringInput
  nombreInvitado3: ModelStringInput
  nombreInvitado4: ModelStringInput
  nombreInvitado5: ModelStringInput
  nombreInvitado6: ModelStringInput
  nombreInvitado7: ModelStringInput
  nombreInvitado8: ModelStringInput
  nombreInvitado9: ModelStringInput
  nombreInvitado10: ModelStringInput
  nombreInvitado11: ModelStringInput
  nombreInvitado12: ModelStringInput
  ofertaDeInvitaciones: ModelIntInput
  nInvitacionesAceptadas: ModelIntInput
  invitacionFamiliar: ModelBooleanInput
  apellidosFamilia: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

type Query {
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
}

input ModelTodoConditionInput {
  IDnovios: ModelStringInput
  nombreInvitado1: ModelStringInput
  nombreInvitado2: ModelStringInput
  nombreInvitado3: ModelStringInput
  nombreInvitado4: ModelStringInput
  nombreInvitado5: ModelStringInput
  nombreInvitado6: ModelStringInput
  nombreInvitado7: ModelStringInput
  nombreInvitado8: ModelStringInput
  nombreInvitado9: ModelStringInput
  nombreInvitado10: ModelStringInput
  nombreInvitado11: ModelStringInput
  nombreInvitado12: ModelStringInput
  ofertaDeInvitaciones: ModelIntInput
  nInvitacionesAceptadas: ModelIntInput
  invitacionFamiliar: ModelBooleanInput
  apellidosFamilia: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTodoInput {
  id: ID
  IDnovios: String!
  nombreInvitado1: String
  nombreInvitado2: String
  nombreInvitado3: String
  nombreInvitado4: String
  nombreInvitado5: String
  nombreInvitado6: String
  nombreInvitado7: String
  nombreInvitado8: String
  nombreInvitado9: String
  nombreInvitado10: String
  nombreInvitado11: String
  nombreInvitado12: String
  ofertaDeInvitaciones: Int
  nInvitacionesAceptadas: Int
  invitacionFamiliar: Boolean!
  apellidosFamilia: String
}

input UpdateTodoInput {
  id: ID!
  IDnovios: String
  nombreInvitado1: String
  nombreInvitado2: String
  nombreInvitado3: String
  nombreInvitado4: String
  nombreInvitado5: String
  nombreInvitado6: String
  nombreInvitado7: String
  nombreInvitado8: String
  nombreInvitado9: String
  nombreInvitado10: String
  nombreInvitado11: String
  nombreInvitado12: String
  ofertaDeInvitaciones: Int
  nInvitacionesAceptadas: Int
  invitacionFamiliar: Boolean
  apellidosFamilia: String
}

input DeleteTodoInput {
  id: ID!
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
}

input ModelSubscriptionTodoFilterInput {
  id: ModelSubscriptionIDInput
  IDnovios: ModelSubscriptionStringInput
  nombreInvitado1: ModelSubscriptionStringInput
  nombreInvitado2: ModelSubscriptionStringInput
  nombreInvitado3: ModelSubscriptionStringInput
  nombreInvitado4: ModelSubscriptionStringInput
  nombreInvitado5: ModelSubscriptionStringInput
  nombreInvitado6: ModelSubscriptionStringInput
  nombreInvitado7: ModelSubscriptionStringInput
  nombreInvitado8: ModelSubscriptionStringInput
  nombreInvitado9: ModelSubscriptionStringInput
  nombreInvitado10: ModelSubscriptionStringInput
  nombreInvitado11: ModelSubscriptionStringInput
  nombreInvitado12: ModelSubscriptionStringInput
  ofertaDeInvitaciones: ModelSubscriptionIntInput
  nInvitacionesAceptadas: ModelSubscriptionIntInput
  invitacionFamiliar: ModelSubscriptionBooleanInput
  apellidosFamilia: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
}

type Subscription {
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["deleteTodo"])
}
